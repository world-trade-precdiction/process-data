import requests
import pandas as pd
import time

API_KEY = "55c5e320a8ed4a5984614a98d8d1ab6a"
base_url = "https://comtradeapi.un.org/data/v1/get"

reporter_list = [
    ('4', 'Afghanistan'),
    ('8', 'Albania'),
    ('12', 'Algeria'),
    ('16', 'American Samoa'),
    ('20', 'Andorra'),
    ('24', 'Angola'),
    ('28', 'Antigua and Barbuda'),
    ('31', 'Armenia'),
    ('32', 'Argentina'),
    ('36', 'Australia'),
    ('40', 'Austria'),
    ('44', 'Bahamas'),
    ('48', 'Bahrain'),
    ('50', 'Bangladesh'),
    ('51', 'Aruba'),
    ('52', 'Barbados'),
    ('56', 'Belgium'),
    ('60', 'Bermuda'),
    ('64', 'Bhutan'),
    ('68', 'Bolivia'),
    ('70', 'Bosnia and Herzegovina'),
    ('72', 'Botswana'),
    ('74', 'Bouvet Island'),
    ('76', 'Brazil'),
    ('84', 'Belize'),
    ('86', 'British Indian Ocean Territory'),
    ('90', 'Solomon Islands'),
    ('92', 'British Virgin Islands'),
    ('96', 'Brunei Darussalam'),
    ('100', 'Bulgaria'),
    ('104', 'Myanmar'),
    ('108', 'Burundi'),
    ('112', 'Belarus'),
    ('116', 'Cambodia'),
    ('120', 'Cameroon'),
    ('124', 'Canada'),
    ('132', 'Cape Verde'),
    ('136', 'Cayman Islands'),
    ('140', 'Central African Republic'),
    ('144', 'Sri Lanka'),
    ('148', 'Chad'),
    ('152', 'Chile'),
    ('156', 'China'),
    ('158', 'Taiwan'),
    ('162', 'Christmas Island'),
    ('166', 'Cocos (Keeling) Islands'),
    ('170', 'Colombia'),
    ('174', 'Comoros'),
    ('175', 'Mayotte'),
    ('178', 'Congo'),
    ('180', 'Congo (Dem. Rep.)'),
    ('184', 'Cook Islands'),
    ('188', 'Costa Rica'),
    ('191', 'Croatia'),
    ('192', 'Cuba'),
    ('196', 'Cyprus'),
    ('203', 'Czech Republic'),
    ('204', 'Benin'),
    ('208', 'Denmark'),
    ('212', 'Dominica'),
    ('214', 'Dominican Republic'),
    ('218', 'Ecuador'),
    ('222', 'El Salvador'),
    ('226', 'Equatorial Guinea'),
    ('231', 'Ethiopia'),
    ('232', 'Eritrea'),
    ('233', 'Estonia'),
    ('234', 'Faroe Islands'),
    ('238', 'Falkland Islands (Malvinas)'),
    ('242', 'Fiji'),
    ('246', 'Finland'),
    ('250', 'France'),
    ('254', 'French Guiana'),
    ('258', 'French Polynesia'),
    ('260', 'French Southern Territories'),
    ('262', 'Djibouti'),
    ('266', 'Gabon'),
    ('268', 'Georgia'),
    ('270', 'Gambia'),
    ('275', 'Palestine'),
    ('276', 'Germany'),
    ('288', 'Ghana'),
    ('292', 'Gibraltar'),
    ('296', 'Kiribati'),
    ('300', 'Greece'),
    ('304', 'Greenland'),
    ('308', 'Grenada'),
    ('312', 'Guadeloupe'),
    ('316', 'Guam'),
    ('320', 'Guatemala'),
    ('324', 'Guinea'),
    ('328', 'Guyana'),
    ('332', 'Haiti'),
    ('334', 'Heard Island and McDonald Islands'),
    ('336', 'Holy See (Vatican City State)'),
    ('340', 'Honduras'),
    ('344', 'Hong Kong'),
    ('348', 'Hungary'),
    ('352', 'Iceland'),
    ('356', 'India'),
    ('360', 'Indonesia'),
    ('364', 'Iran'),
    ('368', 'Iraq'),
    ('372', 'Ireland'),
    ('376', 'Israel'),
    ('380', 'Italy'),
    ('384', 'Cote d\'Ivoire'),
    ('388', 'Jamaica'),
    ('392', 'Japan'),
    ('398', 'Kazakhstan'),
    ('400', 'Jordan'),
    ('404', 'Kenya'),
    ('408', 'Korea, Dem. People\'s Rep.'),
    ('410', 'Korea, Rep.'),
    ('414', 'Kuwait'),
    ('417', 'Kyrgyzstan'),
    ('418', 'Lao People\'s Dem. Rep.'),
    ('422', 'Lebanon'),
    ('426', 'Lesotho'),
    ('428', 'Latvia'),
    ('430', 'Liberia'),
    ('434', 'Libyan Arab Jamahiriya'),
    ('438', 'Liechtenstein'),
    ('440', 'Lithuania'),
    ('442', 'Luxembourg'),
    ('446', 'Macao'),
    ('450', 'Madagascar'),
    ('454', 'Malawi'),
    ('458', 'Malaysia'),
    ('462', 'Maldives'),
    ('466', 'Mali'),
    ('470', 'Malta'),
    ('474', 'Martinique'),
    ('478', 'Mauritania'),
    ('480', 'Mauritius'),
    ('484', 'Mexico'),
    ('492', 'Monaco'),
    ('496', 'Mongolia'),
    ('498', 'Moldova'),
    ('499', 'Montenegro'),
    ('500', 'Montserrat'),
    ('504', 'Morocco'),
    ('508', 'Mozambique'),
    ('512', 'Oman'),
    ('516', 'Namibia'),
    ('520', 'Nauru'),
    ('524', 'Nepal'),
    ('528', 'Netherlands'),
    ('530', 'Netherlands Antilles'),
    ('533', 'Aruba'),
    ('540', 'New Caledonia'),
    ('548', 'Vanuatu'),
    ('554', 'New Zealand'),
    ('558', 'Nicaragua'),
    ('562', 'Niger'),
    ('566', 'Nigeria'),
    ('570', 'Niue'),
    ('574', 'Norfolk Island'),
    ('578', 'Norway'),
    ('580', 'Northern Mariana Islands'),
    ('581', 'United States Minor Outlying Islands'),
    ('583', 'Micronesia'),
    ('584', 'Marshall Islands'),
    ('585', 'Palau'),
    ('586', 'Pakistan'),
    ('591', 'Panama'),
    ('598', 'Papua New Guinea'),
    ('600', 'Paraguay'),
    ('604', 'Peru'),
    ('608', 'Philippines'),
    ('612', 'Pitcairn'),
    ('616', 'Poland'),
    ('620', 'Portugal'),
    ('624', 'Guinea-Bissau'),
    ('626', 'Timor-Leste'),
    ('630', 'Puerto Rico'),
    ('634', 'Qatar'),
    ('638', 'Reunion'),
    ('642', 'Romania'),
    ('643', 'Russian Federation'),
    ('646', 'Rwanda'),
    ('652', 'Saint Helena'),
    ('654', 'Saint Kitts and Nevis'),
    ('659', 'Saint Lucia'),
    ('660', 'Saint Pierre and Miquelon'),
    ('662', 'Saint Vincent and the Grenadines'),
    ('663', 'Samoa'),
    ('666', 'San Marino'),
    ('670', 'Sao Tome and Principe'),
    ('674', 'Saudi Arabia'),
    ('678', 'Senegal'),
    ('682', 'Serbia'),
    ('686', 'Seychelles'),
    ('688', 'Sierra Leone'),
    ('690', 'Singapore'),
    ('694', 'Slovakia'),
    ('702', 'Slovenia'),
    ('703', 'Somalia'),
    ('704', 'South Africa'),
    ('705', 'South Sudan'),
    ('706', 'Zimbabwe'),
    ('710', 'Eswatini'),
    ('716', 'Sudan'),
    ('724', 'Spain'),
    ('728', 'Svalbard and Jan Mayen Islands'),
    ('729', 'Sierra Leone'),
    ('732', 'Western Sahara'),
    ('740', 'Suriname'),
    ('744', 'Svalbard and Jan Mayen Islands'),
    ('748', 'Sweden'),
    ('752', 'Sweden'),
    ('756', 'Switzerland'),
    ('760', 'Syrian Arab Republic'),
    ('762', 'Tajikistan'),
    ('764', 'Thailand'),
    ('768', 'Togo'),
    ('772', 'Tokelau'),
    ('776', 'Tonga'),
    ('780', 'Trinidad and Tobago'),
    ('784', 'United Arab Emirates'),
    ('788', 'Tunisia'),
    ('792', 'Turkey'),
    ('795', 'Turkmenistan'),
    ('796', 'Turks and Caicos Islands'),
    ('798', 'Tuvalu'),
    ('800', 'Uganda'),
    ('804', 'Ukraine'),
    ('807', 'North Macedonia'),
    ('818', 'Egypt'),
    ('826', 'United Kingdom'),
    ('831', 'Guernsey'),
    ('832', 'Jersey'),
    ('833', 'Isle of Man'),
    ('834', 'Tanzania'),
    ('840', 'United States'),
    ('850', 'U.S. Virgin Islands'),
    ('854', 'Burkina Faso'),
    ('858', 'Uruguay'),
    ('860', 'Uzbekistan'),
    ('862', 'Venezuela'),
    ('876', 'Wallis and Futuna Islands'),
    ('882', 'Samoa'),
    ('887', 'Yemen'),
    ('894', 'Zambia')
]
years = list(range(2000, 2024))
hs_codes = []

for i in range(1, 100):
    x = str(i)
    if len(x) == 1:
        x = '0' + x
    hs_codes.append(x)

headers = {
    "Ocp-Apim-Subscription-Key": API_KEY
}

results = []

for reporter_id, reporter_name in reporter_list:
    for year in years:
        for hs in hs_codes:
            url = f"{base_url}/C/A/HS"
            params = {
                "reporterCode": reporter_id,
                "period": str(year),
                "partnerCode": "0",
                "cmdCode": hs,
                "includeDesc": "true"
            }
            print(f"Fetching {year} - {reporter_name} - HS {hs}")
            try:
                response = requests.get(url, params=params, headers=headers, timeout=30)
                if response.status_code != 200:
                    print(f"Failed request (status {response.status_code}): {response.text}")
                    while response.status_code == 429:
                        time.sleep(30)
                        response = requests.get(url, params=params, headers=headers, timeout=30)
                    if response.status_code != 200:
                        continue

                data = response.json()
                if 'data' not in data:
                    print(f"No data in response for {reporter_name} {year} HS{hs}")
                    continue

                for item in data['data']:
                    results.append({
                        'year': item.get('period'),
                        'reporter': item.get('reporterDesc'),
                        'partner': item.get('partnerDesc'),
                        'trade_flow': item.get('flowDesc'),
                        'hs_code': item.get('cmdCode'),
                        'commodity': item.get('cmdDesc'),
                        'trade_value_usd': item.get('primaryValue')
                    })

            except Exception as e:
                print(f"Request error: {e}")
                continue

df = pd.DataFrame(results)
df.to_csv('import_export_data.csv', index=False, encoding='utf-8-sig')